# Consolidated notes on Data Overview
- The variable 'Unnamed' represent index and should be deleted from data
- Target variable for modeling is "price"
- There are 8188 rows and 10 columns.
- Data types are aligned with information
- There is missing data (NaN) on variable 'real_state'. To be replaced by "unknown"
- Units size goes from 10m2 to 679m2, with a mean of 84.61m2
- Units prices goes from 320EUR to 15000EUR/month, with mean of 1444EUR/month
- price range is assumed referred to monthly rent, so considered as EUR per month
- Units prices by square meter goes from 4.9EUR/m2/month to 186EUR/m2/month, with mean of 17.7EUR/m2/month
- There are units listed with cero rooms
- There are four types of real states being the most common "flat"
- Most units do not have terrace
- Most units do have lift
- The neighborhood with largest unit count is "Eixample"
- There are no duplicated observations


# Consolidated notes on Exploratory Data Analysis
- univariate_numerical(data): Function to generate two plots for each numerical variable. Histplot for variable distribution. Boxplot for statistical summary
- univariate_categorical(data): Function to generate countplot for each categorical variable. Labeled with count and percentage
- plot_crosstab_bar_count(df, var_interest): Function to create a barplot of crosstab of the variable of interest vs each of the rest of categorical variables. Labeled with counts
- plot_crosstab_heat_perc(df, var_interest): Function to create a heatmap of crosstab of the variable of interest vs each of the rest of catagorical variables. Labeled with counts, percentage by row, percentage by column
- boxplot_by_group(df, group, var, outliers): boxplot for a numerical variable of interest vs a categorical variable. with or without outliers. includes data mean and mean by category
- The variables "Unnamed: 0" have a uniform distribution
- The numerical variables have a shift to the right
- The categorical variables are not balanced, with 79% of properties as "apartments" and 78% of units concentrated in 50% of the sample neighbourhoods
- 75% of the apartment units have up to 3 bedrooms and up to 2 bathrooms with an average size of 85m2.
- 75% of the units in Eixample have up to 3 bedrooms and up to 2 bathrooms with an average size of 87m2.
- 'square_meters' has a positive correlation with 'price', 'rooms' and 'bathrooms'
- 'square_meters_price' has a negative correlation with 'square_meters', 'rooms' and 'bathrooms'
- There are only one couple of variables with high correlation: bathroom-square_meters (0.75)
- The most popular unit configuration in the dataset is 2 bedrooms and 1 bathroom with 1836 units (21% of all units).
- Other popular configurations are 1-1 (18%), 3-2 (14%), 3-1 (13%), 2-2 (9%) and 4-2 (8%)
- These six most popular unit configurations represent 86% of all units
- The "df_pop" data frame includes the most popular units in terms of bedroom/bathroom configuration, representing 94% of the samples
- Sarrià-Sant Gervasi, Les Corts, Eixample and San Martí are the most expensive neighbourhoods with average prices above the dataset average.
- Sants-Montjuïc, Horta-Guinardó, Sant Andreu and Nou Barris are the cheapest neighbourhoods with average prices below the dataset average.
- When comparing the price per square metre, Ciutat Vella and Eixample are the most expensive neighbourhoods. - If we compare square meters, Ciutat Vella is the second lowest and Eixample the third
- From the perspective of price per square meter, the most attractive neighborhood according to this data could be Les Corts, with an average surface area of ​​89.79 m2 above the average (78.67 m2) and a price per square meter of 15.85 below the average (17.79)
- From the perspective of price per square meter, the most attractive type of unit according to this data could be the apartment, with an average surface area of ​​80 m2 above the average (78.67 m2) and a price per square meter of 15.76 below the average (17.79)
- There are 1,777 flats in Eixample, being the most popular unit type and neighborhood combination, with 79.68% of the units in Eixample being flats, and 28.9% of the flats are in Eixample. - In Les Courts there are only 398 flats, which makes it far from the most popular type of housing and neighbourhood combination, although 87.67% of the dwellings in Les Courts are flats, only 6.47% of the flats are in Les Courts.
- Most types of units have a lift, in the case of flats the proportion is 74.12%
- Units with a terrace on the other hand, seem to be rare and very few have one

# Notes on Data Preprocesing
- Preprocessed data on a copy of the original dataset named df2
- Created a new category "unknown" in the variable 'real_state' replacing NaN
- Removed the variable "Unnamed: 0" which had no value for modeling
- There are outliers in all variables. df2.shape:(8188, 9)
- Applied the Z-score method, which removes outliers with more than 3 standard deviations. Some variables with a relevant percentage of outliers still remain. df3.shape:(7742, 9)
- Limited outliers to respective whisker boundaries. df4.shape:(7742, 9)
- Created dummy variables for variables 'real_state' and 'neighborhood'. df5.shape:(7742, 20)
- Boolean variables were converted to numeric

# Consolidated notes on EDA (pre-modeling)
- The shape of the data for modeling (7742, 20) does not account for outliers
- The data for modeling have no missing values
- No outliers in the data
- Low correlation between variables, with only a couple of variables having a high correlation (bathroom and square_meters)

# Consolidated notes on Model Building
- Defined function "evaluate_model(model, x_test, y_test)", to evaluate and return the model's metrics into a results dataframe
- Defined function "models_regression_performance_cv_fit(models, x_train, y_train, x_test, y_test, res_df=None)", to compute different metrics to check regression model performance
- Data preparation for modeling over a copy named df5
- Min-Max scaling was applied. The dataset has features with different scales, normalization ensures that no feature dominates the learning process.
- Added constant for modeling
- Data split 70/30. Shape of Training set :  (5419, 20), Shape of test set :  (2323, 20)
- Performance Metrics:
    - MAE (Mean Absolute Error): Measures the average magnitude of errors in a set of predictions, without considering their direction.
    - MSE (Mean Squared Error): Measures the average of the squares of the errors, giving more weight to larger errors.
    - RMSE (Root Mean Squared Error): The square root of MSE, providing error in the same units as the target variable.
    - R2 Score (Coefficient of Determination): Indicates how well the model's predictions approximate the real data points. A value closer to 1 indicates a better fit.
- Evaluated the following regression models:
    - Linear Regression
    - Lasso Regression
    - Ridge Regression
    - Decision Tree
    - Random Forest
    - K-Nearest Neighbors
    - Support Vector Regressor
- **Random Forest**: Best Performance. It has the lowest MAE (0.007322), MSE (0.000576), and RMSE (0.024001), and the highest R2 Score (0.990394), indicating it is the most accurate model among the ones tested.
- **Decision Tree**: Second Best. It also performs very well with low MAE (0.010362), MSE (0.000986), and RMSE (0.031405), and a high R2 Score (0.983554).
- **Support Vector Regressor (SVR)**: Good Performance. It has a relatively low MAE (0.041197), MSE (0.003180), and RMSE (0.056396), with a high R2 Score (0.946966).
- Linear Regression and Ridge Regression: Similar Performance. Both have similar metrics with MAE around 0.042, MSE around 0.004, RMSE around 0.063, and R2 Score around 0.93, indicating decent performance.
- K-Nearest Neighbors (KNN): Moderate Performance. It has higher MAE (0.058904), MSE (0.008940), and RMSE (0.094549), with a lower R2 Score (0.850933), indicating it is less accurate compared to the top models.
- Lasso Regression: Poor Performance: It has the highest MAE (0.196899), MSE (0.059972), and RMSE (0.244891), with a negative R2 Score (-0.000026), indicating it performs poorly on this dataset.
- The three best performing models were selected for model tuning: Random Forest, Decision Tree, and Support Vector Regression.
- After hyperparameter tuning, **Tuned Random Forest**, **Random Forest**, and **Tuned Decision Tree** are the best performing models
- The 3 best performing models after hyperparameter tuning will be evaluated with CrossValidation
- 60-20-20 data split for training-validation-testing
- **Tuned Random Forest** is the best performing model among the tuned models 
- From all models evaluated, **Tuned Random Forest** turns out to be **the best performing model**

# Conclusions
- square_meters is the most important variable to predict unit price and at least an aproximated value should by provided as input.
- It may not make much sense to have square_meters_price as the second most important variable to predict unit price. But having square_meters_price as the second most important variable, and considering it might be an unknown input, the model could consider neighborhood mean to inpute.
- The most accurate model identified to predict price is: RandomForestRegressor(max_depth= 30, min_samples_split= 5, n_estimators=300)
- With this model the performance achieved is MAE:0.00725, MSE:0.00054, RMSE:0.02337, and R2 Score: 0.99089
- Results obtained with scaled data (Min-Max scaling)


